@using Frontend.ViewModel
@using Frontend.Services
@using Radzen

<div class="simple-form" style="width: 700px;">
    <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Select Date:</RadzenText>
    <RadzenDatePicker @bind-Value=@operation.Date DateFormat="d" Class="w-100" />

    <br />
    <br />

    <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Amount:</RadzenText>
    <RadzenNumeric @bind-Value=@operation.Income Class="w-100" />

    <br />
    <br />

    <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Goal:</RadzenText>
    <RadzenDropDown AllowClear="true" TValue="int" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowFiltering="true" Class="w-100"
                    @bind-Value=@operation.TypeId Data=@types TextProperty="Type" ValueProperty="Id" />

    <br />
    <br />

    <div align="center">
        <RadzenButton Click="@(() => SubmitForm())" Text="Confirm" ButtonStyle="ButtonStyle.Success" />
        <RadzenButton Click="@(() => Cancel())" Text="Cancel" ButtonStyle="ButtonStyle.Danger" />
    </div>
</div>

@code {
    [CascadingParameter] BlazoredModalInstance BlazoredModal { get; set; } = default!;
    [Parameter] public OperationViewModel operation { get; set; }
    [Parameter] public List<TypeOfIncomeViewModel>? types { get; set; }
    [Parameter] public OperationService? _operationService { get; set; }

    protected override void OnInitialized() => BlazoredModal.SetTitle("Edit Operation:");

    private async Task Cancel() => await BlazoredModal.CancelAsync();

    private async Task SubmitForm() 
    {
        if (operation.TypeId != 0)
            operation.GoalOfOperation = types.Where(Type => Type.Id == operation.TypeId).LastOrDefault().Type;

        await _operationService.UpdateOperation(operation);

        await BlazoredModal.CloseAsync(ModalResult.Ok<OperationViewModel>(operation));
    }
}
