@page "/"
@using Frontend.Services;
@using Frontend.ViewModel;
@using Radzen
@inject HttpClient http;

<RadzenText TextStyle="TextStyle.H4" TagName="TagName.H1" Class="my-3">
    <strong>Income and expenses:</strong>
</RadzenText>

<div>
    <RadzenCard>
        <div>
            <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Сhoose a date:</RadzenText>
            <RadzenDatePicker @bind-Value=@date DateFormat="d" Change="@(args => GetListOperation())">
                <FooterTemplate>
                    <RadzenButton Click=@OnTodayClick Text="Today" class="w-100"/>
                </FooterTemplate>
            </RadzenDatePicker>
        </div>
        <div>
            <RadzenText TextStyle="TextStyle.H6" TagName="TagName.H2">From: @date.Date.AddMonths(-1).ToString("dd.MM.yyyy") to: @date.ToString("dd.MM.yyyy")</RadzenText>
        </div>
        <br />
        <div>
            <RadzenButton Click="@(() => ShowAddNewOperation())" Text="Add New" ButtonStyle="ButtonStyle.Success" />
            @if (selectedOperations == null)
                isEditButtonsDisabled = true;
            else
                isEditButtonsDisabled = false;
            <RadzenButton Disabled=isEditButtonsDisabled Click="@(() => ShowEditOperation(selectedOperations[0]))" Text="Edit" ButtonStyle="ButtonStyle.Warning" />
            <RadzenButton Disabled=isEditButtonsDisabled Click="@(() => DeleteItem(selectedOperations[0].Id))" Text="Delete" ButtonStyle="ButtonStyle.Danger" />
            <RadzenButton Disabled=isEditButtonsDisabled Click="@ClearSelection" Text="Clear Selection" ButtonStyle="ButtonStyle.Info" />
        </div>
        <br />
        <div>
            <RadzenDataGrid AllowFiltering="true" AllowColumnResize="true" FilterMode="FilterMode.Advanced" AllowSorting="true" PageSize="20" AllowPaging="true"
                            PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true"
                            SelectionMode="DataGridSelectionMode.Single" @bind-Value=@selectedOperations
                            Data="@operations" TItem="OperationViewModel" ColumnWidth="300px" LogicalFilterOperator="LogicalFilterOperator.Or">
                <Columns>
                    <RadzenDataGridColumn TItem="OperationViewModel" Property="Date" Title="Date:" FormatString="{0:d}" TextAlign="TextAlign.Center" Width="40px" />
                    <RadzenDataGridColumn TItem="OperationViewModel" Property="Income" Title="Income:" TextAlign="TextAlign.Center" Width="40px" />
                    <RadzenDataGridColumn TItem="OperationViewModel" Property="GoalOfOperation" Title="Description:" Width="320px" />
                </Columns>
            </RadzenDataGrid>
        </div>
    </RadzenCard>
</div>

@code{
    [CascadingParameter] public IModalService Modal { get; set; }
    private List<OperationViewModel> operations = new();
    private List<TypeOfIncomeViewModel> types = new();
    private OperationService _operationService;
    private TypeService _typeService;
    private BalanceService _balanceService;
    private IList<OperationViewModel> selectedOperations;
    private bool isEditButtonsDisabled;
    private DateTime date = DateTime.Today;

    protected override async Task OnInitializedAsync()
    {
        _balanceService = new BalanceService(http);
        _operationService = new OperationService(http);
        _typeService = new TypeService(http);
        await GetListOperation();
        types = await _typeService.GetListType();
    }

    private async Task GetListOperation()
    {
        operations = await _operationService.GetListOperation(date.Date);
    }

    private async Task DeleteItem(int id)
    {
        var parameters = new ModalParameters()
            .Add(nameof(ShowConfirmMessage.Message), "Are you sure you want to delete this operation?");
        var editForm = Modal.Show<ShowConfirmMessage>("", parameters);
        var result = await editForm.Result;

        if(result.Confirmed)
        {
            ClearSelection();
            await _operationService.DeleteOperation(id);
            await GetListOperation();
        }
    }

    private async Task ShowEditOperation(OperationViewModel operation)
    {
        var parameters = new ModalParameters()
            .Add(nameof(EditOperation.operation), operation)
            .Add(nameof(EditOperation.types), types)
            .Add(nameof(EditOperation._operationService), _operationService);
        var options = new ModalOptions()
        {
            Size = ModalSize.Large
        };

        var editForm = Modal.Show<EditOperation>("Edit Operation", parameters, options);

        var result = await editForm.Result;

        if (result.Confirmed)
        {
            ClearSelection();
            await GetListOperation();
        }
    }

    public async Task ShowAddNewOperation()
    {
        var parameters = new ModalParameters()
            .Add(nameof(AddOperation.types), types)
            .Add(nameof(AddOperation._operationService), _operationService);
        var options = new ModalOptions()
        {
            Size = ModalSize.Large
        };

        var addForm = Modal.Show<AddOperation>("Add new operation", parameters, options);

        var result = await addForm.Result;

        if (result.Confirmed)
        {
            await GetListOperation();
        }
    }

    private void ClearSelection()
    {
        selectedOperations = null;
    }

    async Task OnTodayClick()
    {
        date = DateTime.Now;
        await GetListOperation();
    }
}
